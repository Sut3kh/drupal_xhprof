<?php

define('XHPROF_PATH', 'admin/reports/xhprof');

/**
 * Implementation of hook_permission().
 */
function xhprof_permission() {
  return array(
    'access xhprof data' => array(
      'title' => t('Access XHProf data'),
    ),
  );
}

/**
 * Implementation of hook_theme()
 */
function xhprof_theme() {
  return array(
    'xhprof_overall_summary' => array(
      'variables' => array('totals' => NULL, 'possible_metrics' => NULL, 'metrics' => NULL, 'display_calls' => NULL),
    ),
    'xhprof_run_table' => array(
      'variables' => array(
        'stats' => NULL,
        'totals' => NULL,
        'url_params' => NULL,
        'title' => NULL,
        'flat_data' => NULL,
        'limit' => NULL
      ),
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function xhprof_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'xhprof'),
  );
}

/**
 * Helper. Make sure expensive module_load_include() does not run needlessly.
 */
function xhprof_include() {
  static $included = FALSE;
  if (!$included) {
    module_load_include('inc', 'xhprof');
    module_invoke_all('xhprof_load_classes');
    $included = TRUE;
  }
}

/**
 * Get default URL parameters for XHProf.
 */
function xhprof_param_defaults() {
  // param name, its type, and default value
  return array(
    'run' => '',
    'wts' => '',
    'symbol' => '',
    'sort' => 'wt', // wall time
    'run1' => '',
    'run2' => '',
    'source' => 'xhprof',
    'all' => 0,
  );
}

/**
 * Display XHProf run report.
 */
function xhprof_display_run($run_ids, $symbol = NULL) {
  xhprof_require();

  if (count($run_ids) === 1) {
    $_GET['run'] = $run_ids[0];
    $run_id = $run_ids[0];
  }
  else {
    $_GET['run1'] = $run_ids[0];
    $run1 = $run_ids[0];
    $_GET['run2'] = $run_ids[1];
    $run2 = $run_ids[1];
  }
  $source = \Drupal::config('xhprof.config')->get('site_name');
  $_GET['source'] = $source;

  $url_params = xhprof_param_defaults();
  $required_params = array('sort');
  foreach ($url_params as $param => &$value) {
    if (isset($_GET[$param])) {
      $value = $_GET[$param];
    }
    elseif (!in_array($param, $required_params)) {
      unset($url_params[$param]);
    }
  }
  // Extract params here instead of making them globals. Gross, I know, but
  // less gross than this was originally. Should make this less dumb in the
  // future.
  extract($url_params);

  $class = \Drupal::config('xhprof.config')->get('xhprof_default_class');
  $xhprof_runs_impl = new $class();
  $output = '';
  if (isset($run_id)) {
    // run may be a single run or a comma separate list of runs
    // that'll be aggregated. If "wts" (a comma separated list
    // of integral weights is specified), the runs will be
    // aggregated in that ratio.
    $runs_array = explode(",", $run_id);
    if (isset($_GET['order'])) {
      $sort = xhprof_stat_description($_GET['order'], TRUE);
    }
    if (count($runs_array) == 1) {
      $xhprof_data = $xhprof_runs_impl->get_run($runs_array[0], $source, $description, $sort);
    }
    else {
      if (!empty($wts)) {
        $wts_array = explode(",", $wts);
      }
      else {
        $wts_array = NULL;
      }
      $data = xhprof_aggregate_runs($xhprof_runs_impl, $runs_array, $wts_array, $source, FALSE);
      $xhprof_data = $data['raw'];
      $description = $data['description'];
    }
    xhprof_init_metrics($xhprof_data, $symbol, $sort, FALSE);
    $output .= xhprof_profiler_report($url_params, $symbol, $sort, $run_id, $description, $xhprof_data);
  }
  elseif ($run1 && $run2) {
    // Diff report for two runs.
    $xhprof_data1 = $xhprof_runs_impl->get_run($run1, $source, $description1);
    $xhprof_data2 = $xhprof_runs_impl->get_run($run2, $source, $description2);
    // Initialize what metrics we'll display based on data in Run2
    $output .= xhprof_init_metrics($xhprof_data2, $symbol, $sort, TRUE);
    $output .= xhprof_profiler_report($url_params, $symbol, $sort, $run1, $description1, $xhprof_data1, $run2, $description2, $xhprof_data2);
  }
  else {
    $output .= "No XHProf runs specified in the URL.";
  }

  return $output;
}

/**
 * Theme function to display XHProf run summary.
 */
function theme_xhprof_overall_summary($variables) {
  $output = '';
  // Extract variables: $totals, $possible_metrics, $metrics, $display_calls;
  extract($variables);
  $rows = array();
  foreach ($metrics as $metric) {
    $rows[] = array(
      '<strong>Total ' . xhprof_stat_description($metric) . ':</strong>',
      number_format($totals[$metric]) . " " . $possible_metrics[$metric][1]
    );
  }

  if ($display_calls) {
    $rows[] = array("<strong>Number of function xhprof_Calls:</strong>", number_format($totals['ct']));
  }
  $header = array(array('data' => 'Overall Summary', 'colspan' => 2));
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * Theme function to display list of XHProf function calls.
 */
function theme_xhprof_run_table($variables) {
  // Extract variables: $stats, $totals, $url_params, $title, $flat_data, $limit.
  extract($variables);
  global $base_path;

  // Table attributes
  $attributes = array('id' => 'xhprof-run-table');
  $output = '';
  // Headers.
  $header = array();
  foreach ($stats as $stat) {
    $desc = xhprof_stat_description($stat);
    if (array_key_exists($stat, xhprof_sortable_columns($stat))) {
      if (isset($_GET['sort']) && $stat == $_GET['sort']) {
        $header_desc = l(t($desc), current_path(), array('query' => array('sort' => $stat), t($desc)));
        $header[] = array('data' => t($header_desc) . theme('tablesort_indicator', array('style' => 'desc')));
      }
      else {
        $header_desc = l(t($desc), current_path(), array('query' => array('sort' => $stat), t($desc)));
        $header[] = array('data' => t($header_desc));
      }
    }
    else {
      $header[] = array('data' => t($desc));
    }
  }

  $path = url(XHPROF_PATH . '/' . $run1, array('absolute' => TRUE)) . '/symbol/';
  // Table rows
  $rows = array();
  $i = 0;
  foreach ($flat_data as $data) {
    $row = array(
      array('data' => l($data["fn"], $path . $data["fn"])),
      array('data' => xhprof_print_num($data['ct'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['ct'], $totals['ct'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['wt'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['wt'], $totals['wt'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['excl_wt'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['excl_wt'], $totals['wt'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['cpu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['cpu'], $totals['cpu'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['excl_cpu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['excl_cpu'], $totals['cpu'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['mu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['mu'], $totals['mu'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['excl_mu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['excl_mu'], $totals['mu'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['pmu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['pmu'], $totals['pmu'], TRUE), 'class' => 'xhprof_percent'),
      array('data' => xhprof_print_num($data['excl_pmu'], NULL, TRUE), 'class' => 'xhprof_micro'),
      array('data' => xhprof_print_pct($data['excl_pmu'], $totals['pmu'], TRUE), 'class' => 'xhprof_percent'),
    );
    $rows[] = $row;
    $i++;
    if ($limit && $i >= $limit) {
      break;
    }
  }

  $size = count($flat_data);
  if (!$limit) {
    // no limit
    $limit = $size;
    $display_link = "";
  }
  else {
    $display_link = l(" [ <strong class=bubble>display all </strong>]", current_path(), array(
        'query' => xhprof_array_set($url_params, 'all', 1),
        'html' => TRUE
      ));
  }
  $output .= "<h3 align=center>$title $display_link</h3><br>";
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));

  return $output;
}
